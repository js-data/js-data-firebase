{"version":3,"file":"js-data-firebase.js","sources":["../src/index.js"],"sourcesContent":["import { Query, utils } from 'js-data'\r\nimport { Adapter } from 'js-data-adapter'\r\nimport Firebase from 'firebase'\r\n\r\nfunction isValidString (value) {\r\n  return (value != null && value !== '')\r\n}\r\n\r\nfunction join (items, separator) {\r\n  separator || (separator = '')\r\n  return items.filter(isValidString).join(separator)\r\n}\r\n\r\nfunction makePath (...args) { // eslint-disable-line no-unused-vars\r\n  let result = join(args, '/')\r\n  return result.replace(/([^:\\/]|^)\\/{2,}/g, '$1/')\r\n}\r\n\r\nlet queue = []\r\nlet taskInProcess = false\r\n\r\nfunction enqueue (task) {\r\n  queue.push(task)\r\n}\r\n\r\nfunction dequeue () {\r\n  if (queue.length && !taskInProcess) {\r\n    taskInProcess = true\r\n    queue[0]()\r\n  }\r\n}\r\n\r\nfunction queueTask (task) {\r\n  if (!queue.length) {\r\n    enqueue(task)\r\n    dequeue()\r\n  } else {\r\n    enqueue(task)\r\n  }\r\n}\r\n\r\nfunction createTask (fn) {\r\n  return new utils.Promise(fn).then((result) => {\r\n    taskInProcess = false\r\n    queue.shift()\r\n    setTimeout(dequeue, 0)\r\n    return result\r\n  }, (err) => {\r\n    taskInProcess = false\r\n    queue.shift()\r\n    setTimeout(dequeue, 0)\r\n    return utils.reject(err)\r\n  })\r\n}\r\n\r\nconst __super__ = Adapter.prototype\r\n\r\nconst DEFAULTS = {\r\n  /**\r\n   * TODO\r\n   *\r\n   * @name FirebaseAdapter#basePath\r\n   * @type {string}\r\n   */\r\n  basePath: ''\r\n}\r\n\r\n/**\r\n * {@link FirebaseAdapter} class.\r\n *\r\n * @name module:js-data-firebase.FirebaseAdapter\r\n * @see FirebaseAdapter\r\n */\r\n\r\n/**\r\n * {@link FirebaseAdapter} class. ES2015 default import.\r\n *\r\n * @name module:js-data-firebase.default\r\n * @see FirebaseAdapter\r\n */\r\n\r\n/**\r\n * FirebaseAdapter class.\r\n *\r\n * @example\r\n * import {DataStore} from 'js-data'\r\n * import {FirebaseAdapter} from 'js-data-firebase'\r\n * const store = new DataStore()\r\n * const adapter = new FirebaseAdapter()\r\n * store.registerAdapter('firebase', adapter, { 'default': true })\r\n *\r\n * @class FirebaseAdapter\r\n * @param {Object} [opts] Configuration opts.\r\n * @param {string} [opts.basePath=''] See {@link FirebaseAdapter#basePath}\r\n */\r\nexport function FirebaseAdapter (opts) {\r\n  utils.classCallCheck(this, FirebaseAdapter)\r\n  opts || (opts = {})\r\n  utils.fillIn(opts, DEFAULTS)\r\n  Adapter.call(this, opts)\r\n\r\n  /**\r\n   * The ref instance used by this adapter. Use this directly when you\r\n   * need to write custom queries.\r\n   *\r\n   * @name FirebaseAdapter#baseRef\r\n   * @type {Object}\r\n   */\r\n  if (opts.baseRef || opts.basePath) {\r\n    this.baseRef = opts.baseRef || new Firebase(opts.basePath)\r\n  }\r\n}\r\n\r\n// Setup prototype inheritance from Adapter\r\nFirebaseAdapter.prototype = Object.create(Adapter.prototype, {\r\n  constructor: {\r\n    value: FirebaseAdapter,\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: true\r\n  }\r\n})\r\n\r\nObject.defineProperty(FirebaseAdapter, '__super__', {\r\n  configurable: true,\r\n  value: Adapter\r\n})\r\n\r\n/**\r\n * Alternative to ES6 class syntax for extending `FirebaseAdapter`.\r\n *\r\n * @example <caption>Using the ES2015 class syntax.</caption>\r\n * class MyFirebaseAdapter extends FirebaseAdapter {...}\r\n * const adapter = new MyFirebaseAdapter()\r\n *\r\n * @example <caption>Using {@link FirebaseAdapter.extend}.</caption>\r\n * var instanceProps = {...}\r\n * var classProps = {...}\r\n *\r\n * var MyFirebaseAdapter = FirebaseAdapter.extend(instanceProps, classProps)\r\n * var adapter = new MyFirebaseAdapter()\r\n *\r\n * @method FirebaseAdapter.extend\r\n * @static\r\n * @param {Object} [instanceProps] Properties that will be added to the\r\n * prototype of the subclass.\r\n * @param {Object} [classProps] Properties that will be added as static\r\n * properties to the subclass itself.\r\n * @return {Constructor} Subclass of `FirebaseAdapter`.\r\n */\r\nFirebaseAdapter.extend = utils.extend\r\n\r\nutils.addHiddenPropsToTarget(FirebaseAdapter.prototype, {\r\n  /**\r\n   * Retrieve the number of records that match the selection query. Internal\r\n   * method used by Adapter#count.\r\n   *\r\n   * @name FirebaseAdapter#_count\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper The mapper.\r\n   * @param {Object} query Selection query.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _count (mapper, query, opts) {\r\n    query || (query = {})\r\n    opts || (opts = {})\r\n    return this._findAll(mapper, query, opts).then((result) => {\r\n      result[0] = result[0].length\r\n      return result\r\n    })\r\n  },\r\n\r\n  /**\r\n   * Create a new record. Internal method used by Adapter#create.\r\n   *\r\n   * @name FirebaseAdapter#_create\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper The mapper.\r\n   * @param {Object} props The record to be created.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _create (mapper, props, opts) {\r\n    props || (props = {})\r\n    opts || (opts = {})\r\n    return this._upsert(mapper, props, opts)\r\n  },\r\n\r\n  _upsert (mapper, props, opts) {\r\n    const _props = utils.plainCopy(props)\r\n    opts || (opts = {})\r\n\r\n    const id = utils.get(_props, mapper.idAttribute)\r\n    const collectionRef = this.getRef(mapper, opts)\r\n\r\n    let itemRef\r\n\r\n    if (utils.isSorN(id)) {\r\n      itemRef = collectionRef.child(id)\r\n    } else {\r\n      itemRef = collectionRef.push()\r\n      utils.set(_props, mapper.idAttribute, itemRef.key())\r\n    }\r\n\r\n    return itemRef.set(_props)\r\n      .then(() => this._once(itemRef))\r\n      .then((record) => {\r\n        if (!record) {\r\n          throw new Error('Not Found')\r\n        }\r\n        return [record, { ref: itemRef }]\r\n      })\r\n  },\r\n\r\n  _upsertBatch (mapper, records, opts) {\r\n    opts || (opts = {})\r\n\r\n    const idAttribute = mapper.idAttribute\r\n    const refValueCollection = []\r\n    const collectionRef = this.getRef(mapper, opts)\r\n\r\n    // generate path for each\r\n    records.forEach((record) => {\r\n      const id = utils.get(record, idAttribute)\r\n      let _props = utils.plainCopy(record)\r\n      let itemRef\r\n\r\n      if (utils.isSorN(id)) {\r\n        itemRef = collectionRef.child(id)\r\n      } else {\r\n        itemRef = collectionRef.push()\r\n        utils.set(_props, idAttribute, itemRef.key())\r\n      }\r\n      refValueCollection.push({ ref: itemRef, props: _props })\r\n    })\r\n\r\n    return this._atomicUpdate(refValueCollection)\r\n      .then(() => {\r\n        // since UDFs and timestamps can alter values on write, let's get the latest values\r\n        return utils.Promise.all(refValueCollection.map((item) => this._once(item.ref)))\r\n      })\r\n      .then((records) => {\r\n        // just return the updated records and not the refs?\r\n        return [records, { ref: refValueCollection.map((item) => item.ref) }]\r\n      })\r\n  },\r\n\r\n  _once (ref) {\r\n    return ref.once('value').then((dataSnapshot) => {\r\n      if (!dataSnapshot.exists()) {\r\n        return null\r\n      }\r\n      return dataSnapshot.val()\r\n    })\r\n  },\r\n\r\n  _atomicUpdate (refValueCollection) { // collection of refs and the new value to set at that ref\r\n    // do a deep-path update off the baseRef\r\n    // see https://www.firebase.com/blog/2015-09-24-atomic-writes-and-more.html\r\n    let atomicUpdate = {}\r\n    refValueCollection.forEach((item) => {\r\n      atomicUpdate[item.ref.toString().replace(this.baseRef.toString(), '')] = item.props\r\n    })\r\n    return this.baseRef.update(atomicUpdate)\r\n  },\r\n\r\n  /**\r\n   * Create multiple records in a single batch. Internal method used by\r\n   * Adapter#createMany.\r\n   *\r\n   * @name FirebaseAdapter#_createMany\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper The mapper.\r\n   * @param {Object} records The records to be created.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _createMany (mapper, records, opts) {\r\n    opts || (opts = {})\r\n    return this._upsertBatch(mapper, records, opts)\r\n  },\r\n\r\n  /**\r\n   * Destroy the record with the given primary key. Internal method used by\r\n   * Adapter#destroy.\r\n   *\r\n   * @name FirebaseAdapter#_destroy\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper The mapper.\r\n   * @param {(string|number)} id Primary key of the record to destroy.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _destroy (mapper, id, opts) {\r\n    opts || (opts = {})\r\n    const ref = this.getRef(mapper, opts).child(id)\r\n    return ref.remove().then(() => [undefined, { ref }])\r\n  },\r\n\r\n  /**\r\n   * Destroy the records that match the selection query. Internal method used by\r\n   * Adapter#destroyAll.\r\n   *\r\n   * @name FirebaseAdapter#_destroyAll\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper the mapper.\r\n   * @param {Object} [query] Selection query.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _destroyAll (mapper, query, opts) {\r\n    query || (query = {})\r\n    opts || (opts = {})\r\n\r\n    return this._findAll(mapper, query)\r\n      .then((results) => {\r\n        const [records] = results\r\n        const idAttribute = mapper.idAttribute\r\n        return utils.Promise.all(records.map((record) => {\r\n          return this._destroy(mapper, utils.get(record, idAttribute), opts)\r\n        }))\r\n      })\r\n      .then(() => [undefined, {}])\r\n  },\r\n\r\n  /**\r\n   * Retrieve the record with the given primary key. Internal method used by\r\n   * Adapter#find.\r\n   *\r\n   * @name FirebaseAdapter#_find\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper The mapper.\r\n   * @param {(string|number)} id Primary key of the record to retrieve.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _find (mapper, id, opts) {\r\n    opts || (opts = {})\r\n    const itemRef = this.getRef(mapper, opts).child(id)\r\n    return this._once(itemRef).then((record) => [record, { ref: itemRef }])\r\n  },\r\n  /**\r\n    * Retrieve the records that match the selection query. Internal method used\r\n    * by Adapter#findAll.\r\n    *\r\n    * @name FirebaseAdapter#_findAll\r\n    * @method\r\n    * @private\r\n    * @param {Object} mapper The mapper.\r\n    * @param {Object} query Selection query.\r\n    * @param {Object} [opts] Configuration options.\r\n    * @return {Promise}\r\n    */\r\n  _findAll (mapper, query, opts) {\r\n    query || (query = {})\r\n    opts || (opts = {})\r\n\r\n    const collectionRef = this.getRef(mapper, opts)\r\n\r\n    return collectionRef.once('value').then((dataSnapshot) => {\r\n      const data = dataSnapshot.val()\r\n      if (!data) {\r\n        return [[], { ref: collectionRef }]\r\n      }\r\n      const records = []\r\n      utils.forOwn(data, (value, key) => {\r\n        records.push(value)\r\n      })\r\n      const _query = new Query({\r\n        index: {\r\n          getAll () {\r\n            return records\r\n          }\r\n        }\r\n      })\r\n      return [_query.filter(query).run(), { ref: collectionRef }]\r\n    })\r\n  },\r\n\r\n  /**\r\n   * Retrieve the number of records that match the selection query. Internal\r\n   * method used by Adapter#sum.\r\n   *\r\n   * @name FirebaseAdapter#_sum\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper The mapper.\r\n   * @param {string} field The field to sum.\r\n   * @param {Object} query Selection query.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _sum (mapper, field, query, opts) {\r\n    return this._findAll(mapper, query, opts).then((result) => {\r\n      result[0] = result[0].reduce((sum, record) => sum + (utils.get(record, field) || 0), 0)\r\n      return result\r\n    })\r\n  },\r\n\r\n  /**\r\n   * Apply the given update to the record with the specified primary key.\r\n   * Internal method used by Adapter#update.\r\n   *\r\n   * @name FirebaseAdapter#_update\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper The mapper.\r\n   * @param {(string|number)} id The primary key of the record to be updated.\r\n   * @param {Object} props The update to apply to the record.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _update (mapper, id, props, opts) {\r\n    props || (props = {})\r\n    opts || (opts = {})\r\n\r\n    const itemRef = this.getRef(mapper, opts).child(id)\r\n    return this._once(itemRef)\r\n      .then((currentVal) => {\r\n        if (!currentVal) {\r\n          throw new Error('Not Found')\r\n        }\r\n        utils.deepMixIn(currentVal, props)\r\n        return itemRef.set(currentVal)\r\n      })\r\n      .then(() => this._once(itemRef))\r\n      .then((record) => {\r\n        if (!record) {\r\n          throw new Error('Not Found')\r\n        }\r\n        return [record, { ref: itemRef }]\r\n      })\r\n  },\r\n\r\n  /**\r\n   * Apply the given update to all records that match the selection query.\r\n   * Internal method used by Adapter#updateAll.\r\n   *\r\n   * @name FirebaseAdapter#_updateAll\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper The mapper.\r\n   * @param {Object} props The update to apply to the selected records.\r\n   * @param {Object} [query] Selection query.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _updateAll (mapper, props, query, opts) {\r\n    opts || (opts = {})\r\n    props || (props = {})\r\n    query || (query = {})\r\n\r\n    return this._findAll(mapper, query, opts).then((results) => {\r\n      const [records] = results\r\n      records.forEach((record) => utils.deepMixIn(record, props))\r\n      return this._upsertBatch(mapper, records, opts)\r\n    })\r\n  },\r\n\r\n  /**\r\n   * Update the given records in a single batch. Internal method used by\r\n   * Adapter#updateMany.\r\n   *\r\n   * @name FirebaseAdapter#updateMany\r\n   * @method\r\n   * @private\r\n   * @param {Object} mapper The mapper.\r\n   * @param {Object[]} records The records to update.\r\n   * @param {Object} [opts] Configuration options.\r\n   * @return {Promise}\r\n   */\r\n  _updateMany (mapper, records, opts) {\r\n    opts || (opts = {})\r\n    return this._upsertBatch(mapper, records, opts)\r\n  },\r\n\r\n  getRef (mapper, opts) {\r\n    opts = opts || {}\r\n    return this.baseRef.child(opts.endpoint || mapper.endpoint || mapper.name)\r\n  },\r\n\r\n  create (mapper, props, opts) {\r\n    return createTask((success, failure) => {\r\n      queueTask(() => {\r\n        __super__.create.call(this, mapper, props, opts).then(success, failure)\r\n      })\r\n    })\r\n  },\r\n\r\n  createMany (mapper, props, opts) {\r\n    return createTask((success, failure) => {\r\n      queueTask(() => {\r\n        __super__.createMany.call(this, mapper, props, opts).then(success, failure)\r\n      })\r\n    })\r\n  },\r\n\r\n  destroy (mapper, id, opts) {\r\n    return createTask((success, failure) => {\r\n      queueTask(() => {\r\n        __super__.destroy.call(this, mapper, id, opts).then(success, failure)\r\n      })\r\n    })\r\n  },\r\n\r\n  destroyAll (mapper, query, opts) {\r\n    return createTask((success, failure) => {\r\n      queueTask(() => {\r\n        __super__.destroyAll.call(this, mapper, query, opts).then(success, failure)\r\n      })\r\n    })\r\n  },\r\n\r\n  update (mapper, id, props, opts) {\r\n    return createTask((success, failure) => {\r\n      queueTask(() => {\r\n        __super__.update.call(this, mapper, id, props, opts).then(success, failure)\r\n      })\r\n    })\r\n  },\r\n\r\n  updateAll (mapper, props, query, opts) {\r\n    return createTask((success, failure) => {\r\n      queueTask(() => {\r\n        __super__.updateAll.call(this, mapper, props, query, opts).then(success, failure)\r\n      })\r\n    })\r\n  },\r\n\r\n  updateMany (mapper, records, opts) {\r\n    return createTask((success, failure) => {\r\n      queueTask(() => {\r\n        __super__.updateMany.call(this, mapper, records, opts).then(success, failure)\r\n      })\r\n    })\r\n  }\r\n})\r\n\r\n/**\r\n * Details of the current version of the `js-data-firebase` module.\r\n *\r\n * @name FirebaseAdapter.version\r\n * @type {Object}\r\n * @property {string} version.full The full semver value.\r\n * @property {number} version.major The major version number.\r\n * @property {number} version.minor The minor version number.\r\n * @property {number} version.patch The patch version number.\r\n * @property {(string|boolean)} version.alpha The alpha version value,\r\n * otherwise `false` if the current version is not alpha.\r\n * @property {(string|boolean)} version.beta The beta version value,\r\n * otherwise `false` if the current version is not beta.\r\n */\r\n\r\nexport const version = '<%= version %>'\r\n\r\n/**\r\n * Registered as `js-data-firebase` in NPM and Bower.\r\n *\r\n * @example <caption>Script tag</caption>\r\n * var FirebaseAdapter = window.JSDataFirebase.FirebaseAdapter\r\n * var adapter = new FirebaseAdapter()\r\n *\r\n * @example <caption>CommonJS</caption>\r\n * var FirebaseAdapter = require('js-data-firebase').FirebaseAdapter\r\n * var adapter = new FirebaseAdapter()\r\n *\r\n * @example <caption>ES2015 Modules</caption>\r\n * import {FirebaseAdapter} from 'js-data-firebase'\r\n * const adapter = new FirebaseAdapter()\r\n *\r\n * @example <caption>AMD</caption>\r\n * define('myApp', ['js-data-firebase'], function (JSDataFirebase) {\r\n *   var FirebaseAdapter = JSDataFirebase.FirebaseAdapter\r\n *   var adapter = new FirebaseAdapter()\r\n *\r\n *   // ...\r\n * })\r\n *\r\n * @module js-data-firebase\r\n */\r\n\r\nexport default FirebaseAdapter\r\n"],"names":["utils","Adapter","Query"],"mappings":"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"}